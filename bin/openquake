#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim: tabstop=4 shiftwidth=4 softtabstop=4

"""OpenQuake: software for seismic hazard and risk assessment

It receives its inputs through a configuration file plus input data in .xml
format and stores the results in .xml format.

Available Hazard Analysis

  Classical PSHA
    Input   Source Model Logic Tree
            GMPE Logic Tree

    Output  Hazard maps
            Hazard curves

  Event-Based PSHA
    Input   Source Model Logic Tree
            GMPE Logic Tree

    Output  Ground Motion fields

  Scenario SHA
    Input   Rupture Model

    Output  Ground Motion fields

Available Risk Analysis

  Classical PSHA-based
    Input   Exposure (a value per asset)
            Vulnerability curves (a list of vulnerability functions)
            Seismic hazard input: hazard curves

    Output  A grid of loss-ratio curves
            A grid of loss curves
            A map of losses at each interval

  Probabilistic event-based
    Input   Exposure (a value per asset)
            Vulnerability curves (a list of vulnerability functions)
            Seismic hazard input: sets of ground motion fields

    Output  A grid of loss-ratio curves
            A grid of loss curves
            A map of losses at each interval
            An aggregated loss curve

"""

import getpass
import sys


from openquake.utils import config


config.abort_if_no_config_available()


try:
    import celeryconfig
except ImportError:
    sys.path.append('/usr/openquake')

import oqpath
oqpath.set_oq_path()

from openquake import flags
from openquake import __version__

from openquake.utils import version as utils_version

FLAGS = flags.FLAGS


def _help():
    """Print help information."""
    print __doc__

    print "Options:"
    print flags.get_flags_help()


def _list_calcs():
    # TODO: print column headers
    for c in export.get_calculations(getpass.getuser()):
        # TODO: print the data also
        print '%s: (%s) %s' % (c.id, c.status, c.description)


def _list_outputs():
    for o in export.get_outputs(FLAGS.list_outputs):
        print '%s: %s' % (o.id, o.output_type)


def _export():
    """Execute an export action."""
    if FLAGS.target_dir is None:
        # User needs to specify the 'target_dir' also
        _help()
    else:
        try:
            for file_name in export.export(FLAGS.export, FLAGS.target_dir):
                print file_name
        except NotImplementedError, err:
            print err.message
            print 'This feature is probably not implemented yet'
            sys.exit(1)


if __name__ == '__main__':
    from openquake.export import core as export

    #if len(sys.argv) == 1:
    #    sys.argv.append('--help')

    FLAGS(sys.argv)

    if FLAGS.version is not None:
        print utils_version.info(__version__)
    elif FLAGS.help is not None:
        _help()
    elif FLAGS.list_calculations:
        _list_calcs()
    elif FLAGS.list_outputs is not None:
        _list_outputs()
    elif FLAGS.export is not None:
        _export()
    elif FLAGS.config_file is not None:
        from openquake import job
        from openquake import engine
        try:
            job_profile, params, sections = engine.import_job_profile(
                FLAGS.config_file, user_name=getpass.getuser())
            engine.run_calculation(job_profile, params, sections,
                                   output_type=FLAGS.output_type)
        except job.config.ValidationException as e:
            print str(e)
    else:
        _help()

