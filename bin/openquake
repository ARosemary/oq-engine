#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim: tabstop=4 shiftwidth=4 softtabstop=4

"""Hazard and Risk Computations based on Hazard, Exposure and Vulnerability

It receives its inputs through a configuration file and stores the results in
XML.

Hazard computations
    Expected inputs
        Source model logic trees
        GMPE logic trees

    Expected outputs
        Hazard maps
        Hazard curves

Risk computations
    Expected inputs
        Exposure (value per grid cell)
        Vulnerability functions (multiple lists per grid cell)

    Expected outputs
        A grid of loss-ratio curves
        A grid of loss curves
        A map of losses at each interval
"""

import os
import sys

# this is a hack so that it is easier to test these scripts,
# it will add the proper directories to the path so that
# this script can be run from a checkout
if os.path.exists(os.path.join(os.path.dirname(os.path.dirname(__file__)),
                  'openquake')):
    sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from openquake import flags
from openquake import logs
from openquake import __version__

from openquake import job
from openquake.utils import version as utils_version

FLAGS = flags.FLAGS

flags.DEFINE_string('config_file', 'openquake-config.gem', 'OpenQuake configuration file')
flags.DEFINE_enum('output_type', 'db', ['db', 'xml'],
                  'Computation result output type')

flags.DEFINE_boolean('version', False, 'Show version information')


def register_mixins():
    from openquake.job import Job
    from openquake.output import geotiff
    from openquake.parser import exposure
    from openquake.parser import vulnerability

    from openquake.hazard import job as hazjob
    from openquake.hazard import opensha
    from openquake.risk.job import general
    from openquake.risk.job import probabilistic


if __name__ == '__main__':
    if len(sys.argv) == 1:
        sys.argv.append('--help')

    args = FLAGS(sys.argv)

    if FLAGS.version:
        print utils_version.info(__version__)
        sys.exit(0)

    logs.init_logs()

    # Collect inputs
    # Determine Processing type
    # Validate input data

    # Prepare final configuration, save it
    # Hash final config, store that

    # Kick off processing tasks, and wait...
    # Collate results
    # Generate output

    register_mixins()
    job.run_job(FLAGS.config_file, FLAGS.output_type)
