#!/bin/bash

if [ $GEM_SET_DEBUG ]; then
    set -x
fi

help() {
cat <<HSD
This script must be run as postgres user.

!! The database must not exist already !!

The command line arguments are as follows:

    --db-name=name         The name of the database to set up.
    --db-port=port         The postgresql server port (default: 5432)
    --verbose              Enable verbose output
    --load-fixtures=path   Load test fixtures from path
    --yes                  Don't pause for user input, assume yes on all questions
HSD
exit 0
}


# Stop at the first error in a batch to give a chance to see the error message
psql_batch_options='--set ON_ERROR_STOP=1'

# defaults to be overridden by the arguments given in the command-line
db_port=5432
db_name="openquake2"
user_interaction="on"
verbose="off"
fixtures=""

db_admin_user="postgres"

# What is the name of the db group that all OpenQuake db users belong to?
db_group_name="openquake"

# What OpenQuake db users should be created?
read -r -d '' db_roles <<'EOF'
oq_admin
oq_job_init
EOF

for i in $*
do
    case $i in
    --db-name=*)
        db_name=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
        ;;
    --db-port=*)
        db_port=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
        ;;
    -v|--verbose)
        verbose="on"
        ;;
    --load-fixtures=*)
        fixtures=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
        ;;
    -y|--yes)
        user_interaction="off"
        ;;
    -h|--help)
        help
        ;;
    *)
        echo "!! Uknown option: " $i
        exit 2
        ;;
    esac
done

# if --verbose is off, set "quiet" mode for psql
if [ "$verbose" = "off" ]; then
    psql_batch_options="$psql_batch_options -q"
fi

if [ -z "$db_name" ]; then
    echo "!! Please specify a database name."
    exit 3
fi

if [ "$(whoami)" != "postgres" ]; then
    echo ""
    echo "!! This script should be run as postgres."
fi


# Create OpenQuake database group if not present.
echo ".. creating roles .."
oq_group_present=`psql -p $db_port -U $db_admin_user -d postgres $psql_batch_options -A -t -c "SELECT COUNT(*) FROM pg_group WHERE groname = '$db_group_name';"`
if [ $oq_group_present -eq 0 ]; then
    psql -p $db_port -d postgres -U $db_admin_user -c "CREATE ROLE $db_group_name"
fi

# Create OpenQuake database users/roles if/as needed.
for role in $db_roles; do
    role_present=`psql -p $db_port -U $db_admin_user -d postgres $psql_batch_options -A -t -c "SELECT COUNT(*) FROM pg_user WHERE usename = '$role';"`
    if [ $role_present -eq 0 ]; then
        psql -p $db_port -d postgres -U $db_admin_user -c "CREATE ROLE $role WITH LOGIN IN GROUP openquake PASSWORD 'openquake'" $psql_batch_options
    fi
done

# Exit at the first error, should not be on the first line, otherwise it
# exits too early (at the `read` command)
set -e

# Create the OpenQuake database

db_present=`psql -p $db_port -U $db_admin_user -d postgres $psql_batch_options -A -t -c "SELECT COUNT(*) FROM pg_database WHERE datname='"$db_name"';"`
if [ $db_present -eq 1 ]; then
    echo "WARNING: there is already a $db_name database."
    exit 0
fi

echo ".. Creating database $db_name .."
psql -p $db_port -d postgres -U $db_admin_user -c "CREATE DATABASE $db_name OWNER oq_admin" $psql_batch_options
