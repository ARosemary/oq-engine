#!/bin/bash

help() {
cat <<HSD
This script must be run as postgres user.
`basename $0` initialises the given database with the OpenQuake schema.
Also, table space paths are created as needed (unless this is turned off
by the user).

!! This will *destroy* all data in the OpenQuake database !!

The command line arguments are as follows:

    --db-name=name         The name of the database to set up.
    --db-port=port         The postgresql server port (default: 5432)
    --no-tab-spaces        Don't check/create table spaces and their paths
    --schema-path=path     Absolute path to directory with the schema files.
    --tab-spaces-only      Check/create table spaces and their paths and exit
    --verbose              Enable verbose output
    --load-fixtures=path   Load test fixtures from path
    --yes                  Don't pause for user input, assume yes on all questions
HSD
exit 0
}

# Openquake version
oq_version=`python -c "import openquake.engine; print openquake.engine.__version__"`

# Stop at the first error in a batch to give a chance to see the error message
psql_batch_options='--set ON_ERROR_STOP=1'

# Where do the table spaces live?
tspace_path='/var/lib/postgresql/9.1/main/ts'
# What table spaces should be created?
tspace_list="hzrdi hzrdr riski riskr uiapi"

db_port=5432
schema_path=`dirname $0`/../openquake/engine/db/schema
db_name=`python -c "from openquake.engine.settings import DATABASES; print DATABASES['default']['NAME']"`
user_interaction="on"
check_table_spaces="on"
table_spaces_only="off"
verbose="off"
fixtures=""

db_admin_user="postgres"

# What is the name of the db group that all OpenQuake db users belong to?
db_group_name="openquake"

# What OpenQuake db users should be created?
read -r -d '' db_roles <<'EOF'
oq_admin
oq_job_init
EOF

for i in $*
do
    case $i in
    --schema-path=*)
        schema_path=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
        test \( -d "$schema_path" -a -r "$schema_path" \)
        if [ $? -ne 0 ]; then
            echo "!! Schema path $schema_path does not exist or is not readable."
            exit 1
        fi
        ;;
    --db-name=*)
        db_name=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
        ;;
    --db-port=*)
        db_port=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
        ;;
    --no-tab-spaces)
        check_table_spaces="off"
        ;;
    --tab-spaces-only)
        table_spaces_only="on"
        ;;
    -v|--verbose)
        verbose="on"
        ;;
    --load-fixtures=*)
        fixtures=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
        ;;
    -y|--yes)
        user_interaction="off"
        ;;
    -h|--help)
        help
        ;;
    *)
        echo "!! Uknown option: " $i
        exit 2
        ;;
    esac
done

# if --verbose is off, set "quiet" mode for psql
if [ "$verbose" = "off" ]; then
    psql_batch_options="$psql_batch_options -q"
fi

if [ -z "$db_name" ]; then
    echo "!! Please specify a database name."
    exit 3
fi

if [ "$(whoami)" != "postgres" ]; then
    echo ""
    echo "!! This script should be run as postgres."
fi


if [ "$table_spaces_only" == "off" ]; then
    # None of this is relevant if we only want to check table spaces.
    if [ "$user_interaction" = "on" ]; then
        # Last chance to abort.
        echo "!! This will destroy *ALL* data in the OpenQuake database named $db_name !!"
        echo 'Press <enter> to continue or Ctrl-C to abort'
        read
    fi

    # Drop database
    echo ".. Dropping database $db_name .."
    psql -p $db_port -d postgres -U $db_admin_user -c "DROP DATABASE IF EXISTS $db_name" $psql_batch_options
    # Drop table spaces..
    if [ "$check_table_spaces" == "on" ]; then
        for tspace in $tspace_list; do
            full_ts_name="${tspace}_ts"
            echo ".. Dropping table space $full_ts_name .."
            psql -p $db_port -d postgres -U $db_admin_user -c "DROP TABLESPACE IF EXISTS $full_ts_name" $psql_batch_options
        done
    fi
else
    check_table_spaces="on"
fi

# Create OpenQuake database group if not present.
echo ".. creating roles .."
oq_group_present=`psql -p $db_port -U $db_admin_user -d postgres $psql_batch_options -A -t -c "SELECT COUNT(*) FROM pg_group WHERE groname = '$db_group_name';"`
if [ $oq_group_present -eq 0 ]; then
    psql -p $db_port -d postgres -U $db_admin_user -c "CREATE ROLE $db_group_name"
fi

# Create OpenQuake database users/roles if/as needed.
for role in $db_roles; do
    role_present=`psql -p $db_port -U $db_admin_user -d postgres $psql_batch_options -A -t -c "SELECT COUNT(*) FROM pg_user WHERE usename = '$role';"`
    if [ $role_present -eq 0 ]; then
        psql -p $db_port -d postgres -U $db_admin_user -c "CREATE ROLE $role WITH LOGIN IN GROUP openquake PASSWORD 'openquake'" $psql_batch_options
    fi
done

echo -n ".. Current table spaces: "
echo `psql -p $db_port -U $db_admin_user -c '\db' -d postgres $psql_batch_options | perl -lane 'if ($_ =~ /^\s\S+/) { print $F[0] unless $. < 3 }'`

if [ "$check_table_spaces" == "on" ]; then
    # Create table spaces if needed.
    for tspace in $tspace_list; do
        full_ts_name="${tspace}_ts"
        full_tspace_path="$tspace_path/$full_ts_name"

        # Create table space path if needed.
        test -d "$full_tspace_path"
        if [ $? -ne 0 ]; then
            echo ".. Creating table space path $full_tspace_path .."
            mkdir -p $full_tspace_path
            chown -R postgres.postgres $full_tspace_path
        fi

        # Create the actual table space.
        ts_found=`psql -p $db_port -U $db_admin_user -d postgres $psql_batch_options -A -t -c "SELECT COUNT(*) FROM pg_tablespace WHERE spcname = '$full_ts_name';"`
        if [ $ts_found -eq 0 ]; then
            psql -p $db_port -d postgres -U $db_admin_user -c "CREATE TABLESPACE $full_ts_name OWNER oq_admin LOCATION'$full_tspace_path'" $psql_batch_options
        fi
    done
fi

if [ "$table_spaces_only" == "on" ]; then
    exit 0
fi

# Starting from here this script is executing many batches
# Stopping as soon as one fails makes the error stand out
set -e

# Create the OpenQuake database
echo ".. Creating database $db_name .."
psql -p $db_port -d postgres -U $db_admin_user -c "CREATE DATABASE $db_name OWNER oq_admin" $psql_batch_options

postgres_contrib="/usr/share/postgresql/9.1/contrib"
postgis="$postgres_contrib/postgis-1.5"
# Load the PostGIS stuff into the newly created OpenQuake database, must be run as postgres
echo ".. Loading postgis functions/data into $db_name .."
psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -f $postgis/postgis.sql
psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -f $postgis/spatial_ref_sys.sql
psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -f $postgres_contrib/postgis_comments.sql

# fix ownership of three public tables from postgres to oq_admin
psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -c "ALTER TABLE spatial_ref_sys OWNER TO oq_admin"
psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -c "ALTER TABLE geometry_columns OWNER TO oq_admin"
psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -c "ALTER TABLE geography_columns OWNER TO oq_admin"

uri="oq_admin:openquake@localhost:$db_port/$db_name"

# Create schemas and apply all migrations
echo ".. Creating schemas .."
PYTHONPATH=.:../oq-commonlib oq_upgrade init_db $uri
echo ".. Running migration scripts .."
PYTHONPATH=.:../oq-commonlib oq_upgrade upgrade $uri
echo ".. Done .."
