# -*- coding: utf-8 -*-
# vim: tabstop=4 shiftwidth=4 softtabstop=4

import os
import unittest

from utils import test
from openquake import shapes
from openquake import kvs
from openquake.parser import vulnerability

TEST_FILE = "examples/vulnerability-model-discrete.xml"
NO_OF_CURVES_IN_TEST_FILE = 4


class VulnerabilityModelTestCase(unittest.TestCase):
    
    def setUp(self):
        self.parser = vulnerability.VulnerabilityModelFile(
                os.path.join(test.SCHEMA_DIR, TEST_FILE))
    
        # delete server side cached data
        kvs.flush()

    def test_filtering_is_not_supported(self):
        self.assertRaises(NotImplementedError, self.parser.filter)
    
    def test_loads_all_the_functions_defined(self):
        counter = 0
        
        for (counter, vulnerability_curve) in enumerate(self.parser):
            counter += 1 
        
        self.assertEqual(NO_OF_CURVES_IN_TEST_FILE, counter)
    
    def test_loads_the_functions_data(self):
        model = self._load_vulnerability_model()

        self.assertEqual("MMI", model["PK"]["IMT"])
        self.assertEqual("fatalities", model["PK"]["lossCategory"])
        self.assertEqual("PAGER", model["PK"]["vulnerabilitySetID"])
        self.assertEqual("population", model["PK"]["assetCategory"])
        self.assertEqual("LN", model["PK"]["probabilisticDistribution"])

        self.assertEqual([0.00, 0.00, 0.00, 0.00, 0.00, 0.01,
                0.06, 0.18, 0.36, 0.36, 0.36],
                model["PK"]["lossRatio"])

        self.assertEqual([0.30, 0.30, 0.30, 0.30, 0.30, 0.30,
                0.30, 0.30, 0.30, 0.30, 0.30],
                model["PK"]["coefficientsVariation"])

        self.assertEqual([5.00, 5.50, 6.00, 6.50, 7.00, 7.50,
                8.00, 8.50, 9.00, 9.50, 10.00],
                model["PK"]["IML"])

        self.assertEqual([0.00, 0.00, 0.00, 0.00, 0.00, 0.01,
                0.06, 0.18, 0.36, 0.36, 0.36],
                model["IR"]["lossRatio"])

        self.assertEqual([0.30, 0.30, 0.30, 0.30, 0.30, 0.30,
                0.30, 0.30, 0.30, 0.30, 0.30],
                model["IR"]["coefficientsVariation"])

        self.assertEqual([5.00, 5.50, 6.00, 6.50, 7.00, 7.50,
                8.00, 8.50, 9.00, 9.50, 10.00],
                model["IR"]["IML"])

        self.assertEqual("NPAGER", model["AA"]["vulnerabilitySetID"])

        self.assertEqual([6.00, 6.50, 7.00, 7.50, 8.00, 8.50,
                9.00, 9.50, 10.00, 10.50, 11.00],
                model["AA"]["IML"])

        self.assertEqual([0.50, 0.50, 0.50, 0.50, 0.50, 0.50,
                0.50, 0.50, 0.50, 0.50, 0.50],
                model["AA"]["coefficientsVariation"])

    def test_loading_and_storing_model_in_kvs(self):
        path = os.path.join(test.SCHEMA_DIR, TEST_FILE)
        vulnerability.load_vulnerability_model(1234, path)
        model = vulnerability.load_vuln_model_from_kvs(1234)

        self.assertEqual(NO_OF_CURVES_IN_TEST_FILE, len(model))

        expected_curve = shapes.Curve([
                (5.0, (0.00, 0.3)), (5.5, (0.00, 0.3)),
                (6.0, (0.00, 0.3)), (6.5, (0.00, 0.3)),
                (7.0, (0.00, 0.3)), (7.5, (0.01, 0.3)),
                (8.0, (0.06, 0.3)), (8.5, (0.18, 0.3)),
                (9.0, (0.36, 0.3)), (9.5, (0.36, 0.3)),
                (10.0, (0.36, 0.3))])

        self.assertEqual(expected_curve, model["PK"])
        self.assertEqual(expected_curve, model["IR"])

    def _load_vulnerability_model(self):
        model = {}
        
        for vulnerability_function in self.parser:
            model[vulnerability_function["ID"]] = vulnerability_function

        return model
