# -*- coding: utf-8 -*-
# vim: tabstop=4 shiftwidth=4 softtabstop=4

import os
import unittest

from openquake import test
from openquake.parser import vulnerability

TEST_FILE = "VulnerabilityModelFile-test.xml"
NO_OF_CURVES_IN_TEST_FILE = 10


class VulnerabilityModelTestCase(unittest.TestCase):
    
    def setUp(self):
        self.parser = vulnerability.VulnerabilityModelFile(
                os.path.join(test.DATA_DIR, TEST_FILE))
    
    def test_filtering_is_not_supported(self):
        self.assertRaises(NotImplementedError, self.parser.filter)
    
    def test_loads_all_the_functions_defined(self):
        counter = 0
        
        for (counter, vulnerability_curve) in enumerate(self.parser):
            counter += 1 
        
        self.assertEqual(NO_OF_CURVES_IN_TEST_FILE, counter)
    
    def test_loads_the_functions_data(self):
        model = self._load_vulnerability_model()

        self.assertEqual([0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 
                0.03, 0.09, 0.23, 0.23, 0.23],
                model["PK"]["LossRatios"])

        self.assertEqual([0.30, 0.30, 0.30, 0.30, 0.30, 0.30,
                0.30, 0.30, 0.30, 0.30, 0.30],
                model["PK"]["CoefficientsVariation"])

        self.assertEqual([5.00, 5.50, 6.00, 6.50, 7.00, 7.50,
                8.00, 8.50, 9.00, 9.50, 10.00],
                model["PK"]["IntensityMeasureLevels"])

        self.assertEqual([0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                0.01, 0.03, 0.08, 0.08, 0.08],
                model["CN"]["LossRatios"])

        self.assertEqual([0.30, 0.30, 0.30, 0.30, 0.30, 0.30,
                0.30, 0.30, 0.30, 0.30, 0.30],
                model["CN"]["CoefficientsVariation"])

        self.assertEqual([5.00, 5.50, 6.00, 6.50, 7.00, 7.50,
                8.00, 8.50, 9.00, 9.50, 10.00],
                model["CN"]["IntensityMeasureLevels"])

    def _load_vulnerability_model(self):
        model = {}
        
        for vulnerability_function in self.parser:
            model[vulnerability_function["ID"]] = vulnerability_function

        return model
