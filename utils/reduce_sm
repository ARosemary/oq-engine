#!/usr/bin/env python
#  -*- coding: utf-8 -*-
#  vim: tabstop=4 shiftwidth=4 softtabstop=4

#  Copyright (c) 2018, GEM Foundation

#  OpenQuake is free software: you can redistribute it and/or modify it
#  under the terms of the GNU Affero General Public License as published
#  by the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.

#  OpenQuake is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.

#  You should have received a copy of the GNU Affero General Public License
#  along with OpenQuake.  If not, see <http://www.gnu.org/licenses/>.
import sys
import shutil
import logging
from openquake.baselib import sap
from openquake.hazardlib import nrml
from openquake.commonlib import readinput
from . import extract_source


@sap.Script
def reduce_sm(calc_id):
    """
    Reduce the source model of the given calculation by discarding all
    sources that do not contribute to the hazard.
    """
    logging.basicConfig(level=logging.INFO)
    with datastore.read(calc_id) as dstore:
        info = dstore['source_info'].value
        events = info['events'] > 0
        if events.any():
            source_id = info[events]['source_id']
        else:
            source_id = info[info['num_ruptures'] > 0]['source_id']
        source_ids = set(source_id)
    for paths in readinput.gen_sm_paths(smlt_file):
        for path in paths:
            root = nrml.read(path)
            model = node.Node('sourceModel', root[0].attrib)
            origmodel = root[0]
            if root['xmlns'] == 'http://openquake.org/xmlns/nrml/0.4':
                for src_node in origmodel:
                    if src_node['id'] in source_ids:
                        model.nodes = [src_node]
            else:  # nrml/0.5
                for src_group in origmodel:
                    for src_node in src_group:
                        if src_node['id'] in source_ids:
                            src_group.nodes = [src_node]
                            model.nodes = [src_group]
            if model:
                shutil.copy(path, path + '.bak')
                with open(path, 'wb') as f:
                    nrml.write([model], f, xmlns=root['xmlns'])
                    print('Reduced %s' % path)

reduce_sm.arg('calc_id', 'calculation ID')


if __name__ == '__main__':
    reduce_sm.callfunc()
