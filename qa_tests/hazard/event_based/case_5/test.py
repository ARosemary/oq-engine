# Copyright (c) 2010-2014, GEM Foundation.
#
# OpenQuake is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# OpenQuake is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with OpenQuake.  If not, see <http://www.gnu.org/licenses/>.

import os

import numpy

from nose.plugins.attrib import attr
from openquake.engine.db import models
from qa_tests import _utils as qa_utils

GET_GMF_OUTPUTS = '''
select gsim_lt_path, array_concat(gmvs order by site_id, task_no) as gmf
from hzrdr.gmf_data as a, hzrdr.lt_realization as b, hzrdr.gmf as c
where lt_realization_id=b.id and a.gmf_id=c.id and c.output_id in
(select id from uiapi.output where oq_job_id=%d and output_type='gmf')
group by gsim_lt_path, c.output_id, imt, sa_period, sa_damping
order by c.output_id;
'''

# this is an example with 0 realization for source_model 1
# 5 realizations for source model 2
# (for TRT=Stable Shallow Crust) and 0 realizations
# for source model 3, i.e. a total of 5 realizations
EXPECTED_GMFS = [
    # (gsim_lt_path, gmf) pairs
    (['b2_1'],
     [0.00747935940004, 0.01597873983, 0.0215501126447, 0.00440915936899,
      0.00603436549602, 0.00593353705656, 0.0256426260063, 0.00849999802638,
      0.039254646009, 0.0236382273393, 0.0106531255004, 0.00357823288896,
      0.00915344033337, 0.00905864862856, 0.0111470310325, 0.0127245242057,
      0.00303523684743, 0.0208153731601, 0.0106173606903, 0.00392262506951,
      0.00274548371695, 0.00474561102104, 0.00313587502653, 0.014820688985,
      0.00589609973412, 0.00591653673413, 0.0045981208205, 0.0041630549239,
      0.0142318471411, 0.0128636231222, 0.0106998460449, 0.00445549976327,
      0.0113643056394, 0.00476213397209, 0.00987859419179, 0.00371331356637,
      0.0501757183611, 0.0034628882731, 0.0133887658824, 0.0184114625784,
      0.0056594248955]),
    (['b2_2'],
     [0.00339378388686, 0.010657781224, 0.0154755817615, 0.00196896645204,
      0.00298733139343, 0.00250586813974, 0.0145176558521, 0.00826773916246,
      0.0232402632751, 0.0145982659812, 0.0123050253927, 0.00143837540224,
      0.00489063633165, 0.00832925819868, 0.00473097914031, 0.00711673073644,
      0.00175576093929, 0.0081246180191, 0.0115099344344, 0.00185653333628,
      0.00213071445654, 0.00412970885335, 0.00144227094566, 0.0102816358359,
      0.0050126610923, 0.00310141131016, 0.00196682384483, 0.00241950596139,
      0.00867924364775, 0.0125089730399, 0.00638288160451, 0.00401091825819,
      0.00922194387021, 0.00221332734586, 0.00906683067848, 0.00172891085401,
      0.017773419291, 0.00117656902624, 0.00745997605371, 0.0147879992676,
      0.00318471798752]),
    (['b2_3'],
     [0.00754869629004, 0.0141340774695, 0.0190684956607, 0.00415635619794,
      0.00565328428593, 0.00618205658884, 0.0272328477029, 0.00697908180141,
      0.0369902969076, 0.0240444700039, 0.00810043239883, 0.00325984934221,
      0.00894410390249, 0.00763528877614, 0.0107874937326, 0.0128960005007,
      0.00279207753241, 0.0204402979029, 0.00835264445979, 0.00331587063146,
      0.00214321935812, 0.00377522107132, 0.00259696635242, 0.012627685558,
      0.00489190045495, 0.00501937685231, 0.00436331966899, 0.00386710749632,
      0.01253118503, 0.0108809761943, 0.00918740725467, 0.00342586056979,
      0.0102426642186, 0.00424924246915, 0.00841419434504, 0.0031792541183,
      0.0486139777959, 0.00355396027947, 0.0126707697521, 0.0148226892787,
      0.00472965125523]),
    (['b2_4'],
     [0.00979594365889, 0.024731899523, 0.0340776844646, 0.00595178183123,
      0.00836719847608, 0.00830354307969, 0.0361559922679, 0.0209087802251,
      0.0581780158561, 0.035990460965, 0.0284438111835, 0.00550082866461,
      0.0138856637185, 0.0216040262722, 0.0157426044995, 0.0189932734318,
      0.00610088270571, 0.0261226604791, 0.0275826245569, 0.00650635244826,
      0.00664706073307, 0.0117037349361, 0.00521722576496, 0.0253470661361,
      0.0141080910084, 0.00996820778422, 0.00674147593298, 0.00822136955809,
      0.0237800452746, 0.0308722862557, 0.0182508687763, 0.011213301791,
      0.0241250722353, 0.00757150969018, 0.0232721194569, 0.00608334128984,
      0.0490612186564, 0.00447651349105, 0.0202324669573, 0.0330872645648,
      0.00936007795121]),
    (['b2_5'],
     [0.0114569347846, 0.0217333184889, 0.0295712948746, 0.00616548107444,
      0.008461097683, 0.0081966421429, 0.0376857779139, 0.020341719195,
      0.0658090784299, 0.0337340767099, 0.0243368726359, 0.00536775942877,
      0.0123278222716, 0.0221463622861, 0.0178042706616, 0.0177164937569,
      0.00756690450754, 0.0332171400746, 0.0248307203057, 0.00584960020853,
      0.00649434480942, 0.0108679278282, 0.00503518232324, 0.0221047432295,
      0.0140284443612, 0.00889665258869, 0.00669194510202, 0.0105324596943,
      0.0226715194132, 0.031923048354, 0.0166640123216, 0.010571572348,
      0.0291600340546, 0.00720214977829, 0.0244037825272, 0.00546628312714,
      0.0748270225062, 0.00506146801697, 0.0205448618055, 0.0310719332162,
      0.00914719695911]),
]


class EventBasedHazardCase5TestCase(qa_utils.BaseQATestCase):

    @attr('qa', 'hazard', 'event_based')
    def test(self):
        cfg = os.path.join(os.path.dirname(__file__), 'job.ini')
        job = self.run_hazard(cfg)
        cursor = models.getcursor('job_init')
        cursor.execute(GET_GMF_OUTPUTS % job.id)
        actual_gmfs = cursor.fetchall()
        self.assertEqual(len(actual_gmfs), len(EXPECTED_GMFS))
        for (actual_path, actual_gmf), (expected_path, expected_gmf) in zip(
                actual_gmfs, EXPECTED_GMFS):
            self.assertEqual(actual_path, expected_path)
            self.assertEqual(len(actual_gmf), len(expected_gmf))
            numpy.testing.assert_almost_equal(
                sorted(actual_gmf), sorted(expected_gmf))
