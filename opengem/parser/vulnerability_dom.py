# -*- coding: utf-8 -*-
# vim: tabstop=4 shiftwidth=4 softtabstop=4

"""A DOM version of the vulnerability model parser,
that takes into account the really small size of this input file.

"""

from opengem import state

EMPTY_CODE = 'EMPTY'
STATE['vulnerability_curves'] = {}
STATE['vulnerability_curves'][EMPTY_CODE] = shapes.EMPTY_CURVE

class VulnerabilityModels(object):
    
    def __init__(self, path):
        self.xml = etree.parse(path)
    
    def _bind_model(self, xml_element):
        # parse values
    	intensity_measure_values = map(float, xml_element[0].text.strip().split())
    	loss_ratio_values = map(float, xml_element[1].text.strip().split())
    	coefficient_variation_values = map(float, xml_element[2].text.strip().split())

        # convert raw values into our object model
        curve_data = OrderedDict()
        pairs = zip(loss_ratio_values, coefficient_variation_values)
        
        for idx, IML in enumerate(intensity_measure_values):
            curve_data['%s' % IML] = pairs[idx]

        STATE['vulnerability_curves'][xml_element.attrib['ID']] = shapes.Curve(curve_data)    

    	return function
    
    def get(self, id):
        try:
            STATE['vulnerability_curves'][id]
        except KeyError:
            STATE['vulnerability_curves'][id] = self._bind_model(self.xml.xpath("//VulnerabilityFunction[@ID='%s']" % (id, ))[0])

        return STATE['vulnerability_curves'][id]
